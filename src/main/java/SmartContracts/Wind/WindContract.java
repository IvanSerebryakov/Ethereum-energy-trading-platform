package SmartContracts.Wind;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class WindContract extends Contract {

    private static final String BINARY = "608060405261afc860075561c35060085561ea6060105561520860215534801561002857600080fd5b50613a49806100386000396000f3fe6080604052600436106101c25760003560e01c8063aa61afb4116100f7578063d99a024911610095578063e15fe88e11610064578063e15fe88e14610d02578063e26a8a2f14610d53578063e26b88a214610f43578063eacab9f314610f5a576101c2565b8063d99a024914610c1b578063dc25b5af14610c25578063e01a789914610c76578063e126c4bb14610cb1576101c2565b8063c11c9595116100d1578063c11c959514610895578063c3545b101461099f578063c6238d8714610b8f578063ca28780914610bca576101c2565b8063aa61afb4146105c6578063ab5b324e14610681578063ba642ef11461078b576101c2565b806348b50e3c1161016457806375af16fb1161013e57806375af16fb14610503578063a0efffaf1461051a578063a3ba0ce514610524578063aa09643e14610575576101c2565b806348b50e3c146102c15780635e32f5c4146102fc5780636f78928e14610313576101c2565b806327796086116101a05780632779608614610216578063331ff3ed146102445780633a898f4e1461026f57806342bce191146102aa576101c2565b806306507af3146101c7578063116d40ed146101f5578063177f845c146101ff575b600080fd5b6101f3600480360360208110156101dd57600080fd5b8101908080359060200190929190505050610f64565b005b6101fd6110ce565b005b34801561020b57600080fd5b506102146112d7565b005b6102426004803603602081101561022c57600080fd5b81019080803590602001909291905050506113f0565b005b34801561025057600080fd5b5061025961155a565b6040518082815260200191505060405180910390f35b34801561027b57600080fd5b506102a86004803603602081101561029257600080fd5b8101908080359060200190929190505050611564565b005b3480156102b657600080fd5b506102bf61168c565b005b3480156102cd57600080fd5b506102fa600480360360208110156102e457600080fd5b8101908080359060200190929190505050611812565b005b34801561030857600080fd5b506103116118f2565b005b34801561031f57600080fd5b50610328611a78565b604051808060200189815260200180602001888152602001806020018781526020018060200186815260200185810385528d818151815260200191508051906020019080838360005b8381101561038c578082015181840152602081019050610371565b50505050905090810190601f1680156103b95780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b838110156103f25780820151818401526020810190506103d7565b50505050905090810190601f16801561041f5780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b8381101561045857808201518184015260208101905061043d565b50505050905090810190601f1680156104855780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b838110156104be5780820151818401526020810190506104a3565b50505050905090810190601f1680156104eb5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561050f57600080fd5b50610518611c6b565b005b610522611d72565b005b34801561053057600080fd5b506105736004803603602081101561054757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f7b565b005b34801561058157600080fd5b506105c46004803603602081101561059857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612108565b005b3480156105d257600080fd5b506105ff600480360360208110156105e957600080fd5b8101908080359060200190929190505050612278565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561064557808201518184015260208101905061062a565b50505050905090810190601f1680156106725780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561068d57600080fd5b5061069661245f565b604051808060200185815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b838110156106e65780820151818401526020810190506106cb565b50505050905090810190601f1680156107135780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561074c578082015181840152602081019050610731565b50505050905090810190601f1680156107795780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561079757600080fd5b506107a06125d4565b604051808060200185815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b838110156107f05780820151818401526020810190506107d5565b50505050905090810190601f16801561081d5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b8381101561085657808201518184015260208101905061083b565b50505050905090810190601f1680156108835780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156108a157600080fd5b506108aa612749565b604051808060200185815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b838110156108fa5780820151818401526020810190506108df565b50505050905090810190601f1680156109275780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610960578082015181840152602081019050610945565b50505050905090810190601f16801561098d5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156109ab57600080fd5b506109b46128be565b604051808060200189815260200180602001888152602001806020018781526020018060200186815260200185810385528d818151815260200191508051906020019080838360005b83811015610a185780820151818401526020810190506109fd565b50505050905090810190601f168015610a455780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b83811015610a7e578082015181840152602081019050610a63565b50505050905090810190601f168015610aab5780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b83811015610ae4578082015181840152602081019050610ac9565b50505050905090810190601f168015610b115780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b83811015610b4a578082015181840152602081019050610b2f565b50505050905090810190601f168015610b775780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b348015610b9b57600080fd5b50610bc860048036036020811015610bb257600080fd5b8101908080359060200190929190505050612a94565b005b348015610bd657600080fd5b50610c1960048036036020811015610bed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b9a565b005b610c23612d27565b005b348015610c3157600080fd5b50610c7460048036036020811015610c4857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e8b565b005b348015610c8257600080fd5b50610caf60048036036020811015610c9957600080fd5b8101908080359060200190929190505050612ffb565b005b348015610cbd57600080fd5b50610d0060048036036020811015610cd457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613108565b005b348015610d0e57600080fd5b50610d5160048036036020811015610d2557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613294565b005b348015610d5f57600080fd5b50610d6861341c565b604051808060200189815260200180602001888152602001806020018781526020018060200186815260200185810385528d818151815260200191508051906020019080838360005b83811015610dcc578082015181840152602081019050610db1565b50505050905090810190601f168015610df95780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b83811015610e32578082015181840152602081019050610e17565b50505050905090810190601f168015610e5f5780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b83811015610e98578082015181840152602081019050610e7d565b50505050905090810190601f168015610ec55780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b83811015610efe578082015181840152602081019050610ee3565b50505050905090810190601f168015610f2b5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b348015610f4f57600080fd5b50610f586135f2565b005b610f62613779565b005b60008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461103a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f4e6f742077696e6400000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060118190555060105481026012819055506002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6012549081150290604051600060405180830381858888f193505050501580156110ca573d6000803e3d6000fd5b5050565b6002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f742073746f7261676500000000000000000000000000000000000000000081525060200191505060405180910390fd5b6003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160278190555060006002601f540290506003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561127f573d6000803e3d6000fd5b506003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160288190555050565b6003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b60005a9050600f54601c60008282540192505081905550600e54601d600082825401925050819055506021545a820301601f6000828254019250508190555050565b6002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f742073746f7261676500000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600f819055506008548102600e8190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600e549081150290604051600060405180830381858888f19350505050158015611556573d6000803e3d6000fd5b5050565b6000600654905090565b6001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461163b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f742057696e64436f756e746572000000000000000000000000000000000081525060200191505060405180910390fd5b60005a905081601a6000828254019250508190555081600960008282540192505081905550601254601b600082825401925050819055506021545a820301601e600082825401925050819055505050565b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611763576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b60005a9050600d54600654600a54020360178190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631602281905550600060175414156117e05760006015819055505b600060175411156117f957614e20601754016015819055505b6021545a82030160206000828254019250508190555050565b60008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f4e6f742077696e6400000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060068190555050565b6003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b60005a9050601d54600854601c54020360188190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160248190555060006018541115611a4b57614e20601854016019819055505b60006018541415611a5f5760006019819055505b6021545a820301601f6000828254019250508190555050565b606060006060600060606000606060006001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f742057696e64436f756e746572000000000000000000000000000000000081525060200191505060405180910390fd5b600654600a5402600d546015546022546040518060400160405280600c81526020017f4d75737420626520706179200000000000000000000000000000000000000000815250939291906040518060400160405280600d81526020017f46616374207061796d656e7420000000000000000000000000000000000000008152509291906040518060400160405280600581526020017f66696e652000000000000000000000000000000000000000000000000000000081525091906040518060400160405280601481526020017f636f6e74726f6c42616c616e63654f6657696e6400000000000000000000000081525090975097509750975097509750975097509091929394959697565b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d42576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b60005a9050600c54600d600082825401925050819055506021545a82030160206000828254019250508190555050565b6004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f7420636f6e73756d6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631602981905550600060026020540290506005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611f23573d6000803e3d6000fd5b506005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631602a8190555050565b600115156004600080815260200190815260200160002060000160149054906101000a900460ff1615151415612019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f436f6e73756d657220686173206265656e20726567697374657265642100000081525060200191505060405180910390fd5b806004600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016004600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600460008081526020019081526020016000206001018190555050565b600115156005600080815260200190815260200160002060000160149054906101000a900460ff1615151415612189576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806139f16024913960400191505060405180910390fd5b806005600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600560008081526020019081526020016000206001018190555050565b606060006001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f742057696e64436f756e746572000000000000000000000000000000000081525060200191505060405180910390fd5b6000836007540290508060095410156123b257600060095482039050806040518060400160405280600481526020017f6c657373000000000000000000000000000000000000000000000000000000008152509093509350505061245a565b80600954111561240857600081600954039050806040518060400160405280600481526020017f6d6f7265000000000000000000000000000000000000000000000000000000008152509093509350505061245a565b8060095414156124585760006040518060400160405280600281526020017f4f6b00000000000000000000000000000000000000000000000000000000000081525090809050925092505061245a565b505b915091565b60606000606060006001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461253e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f742057696e64436f756e746572000000000000000000000000000000000081525060200191505060405180910390fd5b600060255460265403905060006002601e5402905080826040518060400160405280600b81526020017f4d7573742062652070617900000000000000000000000000000000000000000081525091906040518060400160405280600c81526020017f66616374207061796d656e740000000000000000000000000000000000000000815250909550955095509550505090919293565b60606000606060006003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146126b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b600060275460285403905060006002601f5402905080826040518060400160405280600b81526020017f4d7573742062652070617900000000000000000000000000000000000000000081525091906040518060400160405280600c81526020017f66616374207061796d656e740000000000000000000000000000000000000000815250909550955095509550505090919293565b60606000606060006005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612828576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b6000602954602a540390506000600260205402905080826040518060400160405280600b81526020017f4d7573742062652070617900000000000000000000000000000000000000000081525091906040518060400160405280600c81526020017f66616374207061796d656e740000000000000000000000000000000000000000815250909550955095509550505090919293565b606060006060600060606000606060006003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146129a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b600854601c5402601d546019546024546040518060600160405280602681526020016139cb60269139939291906040518060400160405280600d81526020017f66616374207061796d656e7420000000000000000000000000000000000000008152509291906040518060400160405280600681526020017f70656e6e7920000000000000000000000000000000000000000000000000000081525091906040518060400160405280600c81526020017f77696e642062616c616e6365000000000000000000000000000000000000000081525090975097509750975097509750975097509091929394959697565b6001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f742057696e64436f756e746572000000000000000000000000000000000081525060200191505060405180910390fd5b60005a9050816009600082825401925050819055506021545a820301601e600082825401925050819055505050565b600115156002600080815260200190815260200160002060000160149054906101000a900460ff1615151415612c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f53746f7261676520686173206265656e2072656769737465726564210000000081525060200191505060405180910390fd5b806002600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600260008081526020019081526020016000206001018190555050565b6004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612dfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f7420636f6e73756d6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b600654600b5402600c8190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600c549081150290604051600060405180830381858888f19350505050158015612e88573d6000803e3d6000fd5b50565b600115156003600080815260200190815260200160002060000160149054906101000a900460ff1615151415612f0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806139826023913960400191505060405180910390fd5b806003600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600360008081526020019081526020016000206001018190555050565b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146130d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b60005a905081600b8190555081600a600082825401925050819055506021545a8203016020600082825401925050819055505050565b600115156001600080815260200190815260200160002060000160149054906101000a900460ff16151514156131a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f57696e64436f756e74657220686173206265656e20726567697374657265642181525060200191505060405180910390fd5b806001600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600160008081526020019081526020016000206001018190555050565b6001151560008080815260200190815260200160002060000160149054906101000a900460ff1615151415613331576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f57696e6420686173206265656e2072656769737465726564210000000000000081525060200191505060405180910390fd5b8060008080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008080815260200190815260200160002060000160146101000a81548160ff02191690831515021790555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16316000808081526020019081526020016000206001018190555050565b606060006060600060606000606060006001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f742057696e64436f756e746572000000000000000000000000000000000081525060200191505060405180910390fd5b601054601a5402601b546014546023546040518060600160405280602681526020016139a560269139939291906040518060400160405280600d81526020017f66616374207061796d656e7420000000000000000000000000000000000000008152509291906040518060400160405280600681526020017f70656e6e7920000000000000000000000000000000000000000000000000000081525091906040518060400160405280601081526020017f73746f726167652062616c616e6365200000000000000000000000000000000081525090975097509750975097509750975097509091929394959697565b6001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146136c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f742057696e64436f756e746572000000000000000000000000000000000081525060200191505060405180910390fd5b60005a9050601b54601054601a5402036016819055506002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16316023819055506000601654111561374c57614e20601654016014819055505b600060165414156137605760006014819055505b6021545a820301601e6000828254019250508190555050565b60008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461384f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f4e6f742077696e6400000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160258190555060006002601e540290506001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613929573d6000803e3d6000fd5b506001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16316026819055505056fe53746f72616765436f756e74657220686173206265656e2072656769737465726564214d7573742062652070617920666f722073746f7261676520656e65726779202877696e6429204d7573742062652070617920666f722077696e6420656e65726779202873746f726167652920436f6e73756d6572436f756e74657220686173206265656e207265676973746572656421a265627a7a723158205897c18c5a629c25e062cdc8afad0e31d5506415ede6c6bcf7d8997a1d4d3eb764736f6c63430005110032";

    public static final String FUNC_COMMISSIONTOCONSUMERCOUNTER = "commissionToConsumerCounter";

    public static final String FUNC_COMMISSIONTOSTORAGECOUNTER = "commissionToStorageCounter";

    public static final String FUNC_COMMISSIONTOWINDCOUNTER = "commissionToWindCounter";

    public static final String FUNC_CONTROLCOMMISIONSTORAGECOUNTER = "controlCommisionStorageCounter";

    public static final String FUNC_CONTROLCOMMISSIONCONSUMERCOUNTER = "controlCommissionConsumerCounter";

    public static final String FUNC_CONTROLCOMMISSIONWINDCOUNTER = "controlCommissionWindCounter";

    public static final String FUNC_CONTROLPAYMENTFORWIND = "controlPaymentForWind";

    public static final String FUNC_CONTROLPAYMENTSTORAGEFORWIND = "controlPaymentStorageForWind";

    public static final String FUNC_CONTROLPAYMENTWINDFORSTORAGE = "controlPaymentWindForStorage";

    public static final String FUNC_CONTROLPRODUCTIONENERGYPERDAYWIND = "controlProductionEnergyPerDayWind";

    public static final String FUNC_PAYMENTFORWINDENERGY = "paymentForWindEnergy";

    public static final String FUNC_PAYMENTWINDENERGYFORSTORAGE = "paymentWindEnergyForStorage";

    public static final String FUNC_REPURCHASESTORAGEENERGYFORWIND = "rePurchaseStorageEnergyForWind";

    public static final String FUNC_REGISTERBETFORWIND = "registerBetForWind";

    public static final String FUNC_REGISTRATIONCONSUMER = "registrationConsumer";

    public static final String FUNC_REGISTRATIONCONSUMERCOUNTER = "registrationConsumerCounter";

    public static final String FUNC_REGISTRATIONSTORAGE = "registrationStorage";

    public static final String FUNC_REGISTRATIONSTORAGECOUNTER = "registrationStorageCounter";

    public static final String FUNC_REGISTRATIONWIND = "registrationWind";

    public static final String FUNC_REGISTRATIONWINDCOUNTER = "registrationWindCounter";

    public static final String FUNC_UPDATECONSUMPTIONWINDENERGY = "updateConsumptionWindEnergy";

    public static final String FUNC_UPDATEPAYMENTFORWINDENERGY = "updatePaymentForWindEnergy";

    public static final String FUNC_UPDATEPAYMENTREPURCHASESTORAGEENERGYFORWIND = "updatePaymentRePurchaseStorageEnergyForWind";

    public static final String FUNC_UPDATEPAYMENTWINDENERGYFORSTORAGE = "updatePaymentWindEnergyForStorage";

    public static final String FUNC_UPDATEPRODUCTIONWIND = "updateProductionWind";

    public static final String FUNC_VIEWBETWIND = "viewBetWind";

    public static final String FUNC_VIEWPAYMENTFORWIND = "viewPaymentForWind";

    public static final String FUNC_VIEWPAYMENTSTORAGEFORWIND = "viewPaymentStorageForWind";

    public static final String FUNC_VIEWPAYMENTWINDFORSTORAGE = "viewPaymentWindForStorage";


    protected WindContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }


    protected WindContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> commissionToConsumerCounter(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_COMMISSIONTOCONSUMERCOUNTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> commissionToStorageCounter(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_COMMISSIONTOSTORAGECOUNTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> commissionToWindCounter(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_COMMISSIONTOWINDCOUNTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> controlCommisionStorageCounter() {
        final Function function = new Function(FUNC_CONTROLCOMMISIONSTORAGECOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> controlCommissionConsumerCounter() {
        final Function function = new Function(FUNC_CONTROLCOMMISSIONCONSUMERCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> controlCommissionWindCounter() {
        final Function function = new Function(FUNC_CONTROLCOMMISSIONWINDCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> controlPaymentForWind() {
        final Function function = new Function(
                FUNC_CONTROLPAYMENTFORWIND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> controlPaymentStorageForWind() {
        final Function function = new Function(
                FUNC_CONTROLPAYMENTSTORAGEFORWIND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> controlPaymentWindForStorage() {
        final Function function = new Function(
                FUNC_CONTROLPAYMENTWINDFORSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> controlProductionEnergyPerDayWind(BigInteger day) {
        final Function function = new Function(FUNC_CONTROLPRODUCTIONENERGYPERDAYWIND, 
                Arrays.<Type>asList(new Uint256(day)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> paymentForWindEnergy(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PAYMENTFORWINDENERGY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> paymentWindEnergyForStorage(BigInteger newEnergy, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PAYMENTWINDENERGYFORSTORAGE, 
                Arrays.<Type>asList(new Uint256(newEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> rePurchaseStorageEnergyForWind(BigInteger needEnergy, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_REPURCHASESTORAGEENERGYFORWIND, 
                Arrays.<Type>asList(new Uint256(needEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> registerBetForWind(BigInteger newBet) {
        final Function function = new Function(
                FUNC_REGISTERBETFORWIND, 
                Arrays.<Type>asList(new Uint256(newBet)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationConsumer(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONCONSUMER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationConsumerCounter(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONCONSUMERCOUNTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationStorage(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONSTORAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationStorageCounter(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONSTORAGECOUNTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationWind(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONWIND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationWindCounter(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONWINDCOUNTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateConsumptionWindEnergy(BigInteger newEnergy) {
        final Function function = new Function(
                FUNC_UPDATECONSUMPTIONWINDENERGY, 
                Arrays.<Type>asList(new Uint256(newEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePaymentForWindEnergy() {
        final Function function = new Function(
                FUNC_UPDATEPAYMENTFORWINDENERGY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePaymentRePurchaseStorageEnergyForWind(BigInteger needEnergy) {
        final Function function = new Function(
                FUNC_UPDATEPAYMENTREPURCHASESTORAGEENERGYFORWIND, 
                Arrays.<Type>asList(new Uint256(needEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePaymentWindEnergyForStorage() {
        final Function function = new Function(
                FUNC_UPDATEPAYMENTWINDENERGYFORSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateProductionWind(BigInteger newEnergy) {
        final Function function = new Function(
                FUNC_UPDATEPRODUCTIONWIND, 
                Arrays.<Type>asList(new Uint256(newEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> viewBetWind() {
        final Function function = new Function(FUNC_VIEWBETWIND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>> viewPaymentForWind() {
        final Function function = new Function(FUNC_VIEWPAYMENTFORWIND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>> viewPaymentStorageForWind() {
        final Function function = new Function(FUNC_VIEWPAYMENTSTORAGEFORWIND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>> viewPaymentWindForStorage() {
        final Function function = new Function(FUNC_VIEWPAYMENTWINDFORSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }


    public static WindContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WindContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WindContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WindContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WindContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WindContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<WindContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WindContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

}
