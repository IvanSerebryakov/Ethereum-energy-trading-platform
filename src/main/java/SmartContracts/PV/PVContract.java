package SmartContracts.PV;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class PVContract extends Contract {

    private static final String BINARY = "608060405261afc860075561c35060085561ea6060105561520860225534801561002857600080fd5b50613e4c806100386000396000f3fe6080604052600436106101e35760003560e01c8063712f3eca11610102578063aa09643e11610095578063c11c959511610064578063c11c959514610e0b578063c4871d4314610f15578063ca28780914610f40578063dc25b5af14610f91576101e3565b8063aa09643e14610a6f578063ae4f1b5214610ac0578063b2caca1a14610b11578063ba642ef114610d01576101e3565b806388d013c7116100d157806388d013c7146109df57806395983106146109e9578063a0efffaf14610a14578063a3ba0ce514610a1e576101e3565b8063712f3eca146108ec578063783d6fc21461090357806379a271f4146109be5780637f03e06c146109d5576101e3565b806318bfb2af1161017a5780633bc61d5a116101495780633bc61d5a146107655780634f9acb5c1461077c57806359d70c14146107a75780636ad5b47e146108b1576101e3565b806318bfb2af146104f657806321d4686a146105475780632fb98ce61461055e5780633aa0c34114610575576101e3565b80630fdd0e3a116101b65780630fdd0e3a1461046f578063116d40ed146104aa57806314a6c19e146104b457806316f94202146104cb576101e3565b80630252582f146101e8578063058656ee14610216578063089b04cd146104065780630bc6c13714610441575b600080fd5b610214600480360360208110156101fe57600080fd5b8101908080359060200190929190505050610fe2565b005b34801561022257600080fd5b5061022b61114c565b604051808060200189815260200180602001888152602001806020018781526020018060200186815260200185810385528d818151815260200191508051906020019080838360005b8381101561028f578082015181840152602081019050610274565b50505050905090810190601f1680156102bc5780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b838110156102f55780820151818401526020810190506102da565b50505050905090810190601f1680156103225780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b8381101561035b578082015181840152602081019050610340565b50505050905090810190601f1680156103885780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b838110156103c15780820151818401526020810190506103a6565b50505050905090810190601f1680156103ee5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561041257600080fd5b5061043f6004803603602081101561042957600080fd5b8101908080359060200190929190505050611322565b005b61046d6004803603602081101561045757600080fd5b8101908080359060200190929190505050611402565b005b34801561047b57600080fd5b506104a86004803603602081101561049257600080fd5b810190808035906020019092919050505061156c565b005b6104b2611672565b005b3480156104c057600080fd5b506104c961187b565b005b3480156104d757600080fd5b506104e0611982565b6040518082815260200191505060405180910390f35b34801561050257600080fd5b506105456004803603602081101561051957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a65565b005b34801561055357600080fd5b5061055c611bed565b005b34801561056a57600080fd5b50610573611d73565b005b34801561058157600080fd5b5061058a611ef9565b604051808060200189815260200180602001888152602001806020018781526020018060200186815260200185810385528d818151815260200191508051906020019080838360005b838110156105ee5780820151818401526020810190506105d3565b50505050905090810190601f16801561061b5780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b83811015610654578082015181840152602081019050610639565b50505050905090810190601f1680156106815780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b838110156106ba57808201518184015260208101905061069f565b50505050905090810190601f1680156106e75780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b83811015610720578082015181840152602081019050610705565b50505050905090810190601f16801561074d5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561077157600080fd5b5061077a6120ec565b005b34801561078857600080fd5b50610791612273565b6040518082815260200191505060405180910390f35b3480156107b357600080fd5b506107bc612358565b604051808060200185815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b8381101561080c5780820151818401526020810190506107f1565b50505050905090810190601f1680156108395780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610872578082015181840152602081019050610857565b50505050905090810190601f16801561089f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156108bd57600080fd5b506108ea600480360360208110156108d457600080fd5b81019080803590602001909291905050506124cd565b005b3480156108f857600080fd5b506109016125da565b005b34801561090f57600080fd5b5061093c6004803603602081101561092657600080fd5b81019080803590602001909291905050506126f3565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610982578082015181840152602081019050610967565b50505050905090810190601f1680156109af5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156109ca57600080fd5b506109d36128da565b005b6109dd612a05565b005b6109e7612b69565b005b3480156109f557600080fd5b506109fe612d71565b6040518082815260200191505060405180910390f35b610a1c612e55565b005b348015610a2a57600080fd5b50610a6d60048036036020811015610a4157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061305e565b005b348015610a7b57600080fd5b50610abe60048036036020811015610a9257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131eb565b005b348015610acc57600080fd5b50610b0f60048036036020811015610ae357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061335b565b005b348015610b1d57600080fd5b50610b266134e8565b604051808060200189815260200180602001888152602001806020018781526020018060200186815260200185810385528d818151815260200191508051906020019080838360005b83811015610b8a578082015181840152602081019050610b6f565b50505050905090810190601f168015610bb75780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b83811015610bf0578082015181840152602081019050610bd5565b50505050905090810190601f168015610c1d5780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b83811015610c56578082015181840152602081019050610c3b565b50505050905090810190601f168015610c835780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b83811015610cbc578082015181840152602081019050610ca1565b50505050905090810190601f168015610ce95780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b348015610d0d57600080fd5b50610d166136be565b604051808060200185815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b83811015610d66578082015181840152602081019050610d4b565b50505050905090810190601f168015610d935780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610dcc578082015181840152602081019050610db1565b50505050905090810190601f168015610df95780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b348015610e1757600080fd5b50610e20613833565b604051808060200185815260200180602001848152602001838103835287818151815260200191508051906020019080838360005b83811015610e70578082015181840152602081019050610e55565b50505050905090810190601f168015610e9d5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610ed6578082015181840152602081019050610ebb565b50505050905090810190601f168015610f035780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b348015610f2157600080fd5b50610f2a6139a8565b6040518082815260200191505060405180910390f35b348015610f4c57600080fd5b50610f8f60048036036020811015610f6357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a8c565b005b348015610f9d57600080fd5b50610fe060048036036020811015610fb457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613c18565b005b6001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f742073746f7261676500000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600f819055506008548102600e8190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600e549081150290604051600060405180830381858888f19350505050158015611148573d6000803e3d6000fd5b5050565b606060006060600060606000606060006003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611233576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b600854601c5402601d54601954602b54604051806060016040528060248152602001613df460249139939291906040518060400160405280600d81526020017f66616374207061796d656e7420000000000000000000000000000000000000008152509291906040518060400160405280600681526020017f70656e6e7920000000000000000000000000000000000000000000000000000081525091906040518060400160405280600a81526020017f70762062616c616e63650000000000000000000000000000000000000000000081525090975097509750975097509750975097509091929394959697565b60008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f4e6f74205056000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060068190555050565b60008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f4e6f74205056000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060118190555060105481026012819055506001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6012549081150290604051600060405180830381858888f19350505050158015611568573d6000803e3d6000fd5b5050565b6002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f74205056436f756e7465720000000000000000000000000000000000000081525060200191505060405180910390fd5b60005a9050816009600082825401925050819055506022545a820301601f600082825401925050819055505050565b6001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f742073746f7261676500000000000000000000000000000000000000000081525060200191505060405180910390fd5b6003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631602581905550600060026020540290506003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611823573d6000803e3d6000fd5b506003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160268190555050565b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611952576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b60005a9050600c54600d600082825401925050819055506022545a82030160216000828254019250508190555050565b600080600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f4e6f74205056000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6002601f5402905090565b6001151560008080815260200190815260200160002060000160149054906101000a900460ff1615151415611b02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f505620686173206265656e20726567697374657265642100000000000000000081525060200191505060405180910390fd5b8060008080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008080815260200190815260200160002060000160146101000a81548160ff02191690831515021790555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16316000808081526020019081526020016000206001018190555050565b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cc4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b60005a9050600d54600654600a54020360178190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160298190555060006017541415611d415760006015819055505b60006017541115611d5a57614e20601754016015819055505b6022545a82030160216000828254019250508190555050565b6003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b60005a9050601d54600854601c54020360188190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631602b8190555060006018541115611ecc57614e20601854016019819055505b60006018541415611ee05760006019819055505b6022545a82030160206000828254019250508190555050565b606060006060600060606000606060006005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611fe0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b600654600a5402600d546015546029546040518060400160405280600c81526020017f4d75737420626520706179200000000000000000000000000000000000000000815250939291906040518060400160405280600981526020017f46616374207061792000000000000000000000000000000000000000000000008152509291906040518060400160405280600681526020017f70656e6e7920000000000000000000000000000000000000000000000000000081525091906040518060400160405280600a81526020017f70762062616c616e63650000000000000000000000000000000000000000000081525090975097509750975097509750975097509091929394959697565b6002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f74205056436f756e7465720000000000000000000000000000000000000081525060200191505060405180910390fd5b60005a9050601b54601054601a5402036016819055506001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631602a819055506000601654111561224657614e20601654016014819055505b6000601654141561225a5760006014819055505b6022545a820301601f6000828254019250508190555050565b60006004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461234c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f7420636f6e73756d6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b600654600b5402905090565b60606000606060006002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f74205056436f756e7465720000000000000000000000000000000000000081525060200191505060405180910390fd5b600060235460245403905060006002601f5402905080826040518060400160405280600b81526020017f4d7573742062652070617900000000000000000000000000000000000000000081525091906040518060400160405280600c81526020017f66616374207061796d656e740000000000000000000000000000000000000000815250909550955095509550505090919293565b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b60005a905081600b8190555081600a600082825401925050819055506022545a8203016021600082825401925050819055505050565b6003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b60005a9050600f54601c60008282540192505081905550600e54601d600082825401925050819055506022545a82030160206000828254019250508190555050565b606060006002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146127ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f74205056436f756e7465720000000000000000000000000000000000000081525060200191505060405180910390fd5b60008360075402905080600954101561282d57600060095482039050806040518060400160405280600481526020017f6c65737300000000000000000000000000000000000000000000000000000000815250909350935050506128d5565b80600954111561288357600081600954039050806040518060400160405280600481526020017f6d6f726500000000000000000000000000000000000000000000000000000000815250909350935050506128d5565b8060095414156128d35760006040518060400160405280600281526020017f4f6b0000000000000000000000000000000000000000000000000000000000008152509080905092509250506128d5565b505b915091565b6002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146129b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f74205056436f756e7465720000000000000000000000000000000000000081525060200191505060405180910390fd5b60005a9050601154601a60008282540192505081905550601154600960008282540192505081905550601254601b600082825401925050819055506022545a820301601f6000828254019250508190555050565b6004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f7420636f6e73756d6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b600654600b5402600c8190555060008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600c549081150290604051600060405180830381858888f19350505050158015612b66573d6000803e3d6000fd5b50565b60008080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f4e6f74205056000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160238190555060006002601f540290506002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612d19573d6000803e3d6000fd5b506002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160248190555050565b60006001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612e4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f742073746f7261676500000000000000000000000000000000000000000081525060200191505060405180910390fd5b600260205402905090565b6004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612f2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f7420636f6e73756d6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b6005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631602781905550600060026021540290506005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613006573d6000803e3d6000fd5b506005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160288190555050565b600115156004600080815260200190815260200160002060000160149054906101000a900460ff16151514156130fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f436f6e73756d657220686173206265656e20726567697374657265642100000081525060200191505060405180910390fd5b806004600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016004600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600460008081526020019081526020016000206001018190555050565b600115156005600080815260200190815260200160002060000160149054906101000a900460ff161515141561326c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613dd06024913960400191505060405180910390fd5b806005600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600560008081526020019081526020016000206001018190555050565b600115156002600080815260200190815260200160002060000160149054906101000a900460ff16151514156133f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f5056436f756e74657220686173206265656e207265676973746572656421000081525060200191505060405180910390fd5b806002600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600260008081526020019081526020016000206001018190555050565b606060006060600060606000606060006002600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146135cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f74205056436f756e7465720000000000000000000000000000000000000081525060200191505060405180910390fd5b601054601a5402601b54601454602a54604051806060016040528060248152602001613d8960249139939291906040518060400160405280600d81526020017f66616374207061796d656e7420000000000000000000000000000000000000008152509291906040518060400160405280600781526020017f2070656e6e79200000000000000000000000000000000000000000000000000081525091906040518060400160405280600f81526020017f73746f726167652062616c616e6365000000000000000000000000000000000081525090975097509750975097509750975097509091929394959697565b60606000606060006003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461379d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4e6f742053746f72616765436f756e746572000000000000000000000000000081525060200191505060405180910390fd5b60006025546026540390506000600260205402905080826040518060400160405280600b81526020017f4d7573742062652070617900000000000000000000000000000000000000000081525091906040518060400160405280600c81526020017f66616374207061796d656e740000000000000000000000000000000000000000815250909550955095509550505090919293565b60606000606060006005600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613912576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420636f6e73756d657220636f756e74657200000000000000000000000081525060200191505060405180910390fd5b60006027546028540390506000600260215402905080826040518060400160405280600b81526020017f4d7573742062652070617900000000000000000000000000000000000000000081525091906040518060400160405280600c81526020017f66616374207061796d656e740000000000000000000000000000000000000000815250909550955095509550505090919293565b60006004600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4e6f7420636f6e73756d6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b600260215402905090565b600115156001600080815260200190815260200160002060000160149054906101000a900460ff1615151415613b2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f53746f7261676520686173206265656e2072656769737465726564210000000081525060200191505060405180910390fd5b806001600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506001600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600160008081526020019081526020016000206001018190555050565b600115156003600080815260200190815260200160002060000160149054906101000a900460ff1615151415613c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613dad6023913960400191505060405180910390fd5b806003600080815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016003600080815260200190815260200160002060000160146101000a81548160ff0219169083151502179055506003600080815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160036000808152602001908152602001600020600101819055505056fe4d7573742062652070617920666f722073746f7261676520656e6572677920287076292053746f72616765436f756e74657220686173206265656e207265676973746572656421436f6e73756d6572436f756e74657220686173206265656e2072656769737465726564214d7573742062652070617920666f7220707620656e65726779202873746f726167652920a265627a7a72315820003bbca10027a73223da1ed28b2a3626e5d60358ae92e533823163a794c47f7b64736f6c63430005110032";

    public static final String FUNC_COMMISIONTOPVCOUNTER = "commisionToPVCounter";

    public static final String FUNC_COMMISSIONTOCONSUMERCOUNTER = "commissionToConsumerCounter";

    public static final String FUNC_COMMISSIONTOSTORAGECOUNTER = "commissionToStorageCounter";

    public static final String FUNC_CONTROLCOMMISIONSTORAGECOUNTER = "controlCommisionStorageCounter";

    public static final String FUNC_CONTROLCOMMISSIONCONSUMERCOUNTER = "controlCommissionConsumerCounter";

    public static final String FUNC_CONTROLCOMMISSIONPVCOUNTER = "controlCommissionPVCounter";

    public static final String FUNC_CONTROLPAYMENTFORPV = "controlPaymentForPV";

    public static final String FUNC_CONTROLPAYMENTPVFORSTORAGE = "controlPaymentPVForStorage";

    public static final String FUNC_CONTROLPAYMENTSTORAGEFORPV = "controlPaymentStorageForPV";

    public static final String FUNC_CONTROLPRODUCTIONENERGYPERDAYPV = "controlProductionEnergyPerDayPV";

    public static final String FUNC_PAYMENTFORPVENERGY = "paymentForPVEnergy";

    public static final String FUNC_PAYMENTPVENERGYFORSTORAGE = "paymentPVEnergyForStorage";

    public static final String FUNC_REPURCHASESTORAGEENERGYFORPV = "rePurchaseStorageEnergyForPV";

    public static final String FUNC_REGISTERBETFORPV = "registerBetForPV";

    public static final String FUNC_REGISTRATIONCONSUMER = "registrationConsumer";

    public static final String FUNC_REGISTRATIONCONSUMERCOUNTER = "registrationConsumerCounter";

    public static final String FUNC_REGISTRATIONPV = "registrationPV";

    public static final String FUNC_REGISTRATIONPVCOUNTER = "registrationPVCounter";

    public static final String FUNC_REGISTRATIONSTORAGE = "registrationStorage";

    public static final String FUNC_REGISTRATIONSTORAGECOUNTER = "registrationStorageCounter";

    public static final String FUNC_UPDATECONSUMPTIONPVENERGY = "updateConsumptionPVenergy";

    public static final String FUNC_UPDATEPAYMENTFORPVENERGY = "updatePaymentForPVEnergy";

    public static final String FUNC_UPDATEPAYMENTPVENERGYFORSTORAGE = "updatePaymentPVEnergyForStorage";

    public static final String FUNC_UPDATEPAYMENTREPURCHASESTORAGEENERGYFORPV = "updatePaymentRePurchaseStorageEnergyForPV";

    public static final String FUNC_UPDATEPRODUCTIONPV = "updateProductionPV";

    public static final String FUNC_VIEWCOMISSIONCONSUMERCOUNTER = "viewComissionConsumerCounter";

    public static final String FUNC_VIEWCOMISSIONPVCOUNTER = "viewComissionPVCounter";

    public static final String FUNC_VIEWCOMISSIONSTORAGECOUNTER = "viewComissionStorageCounter";

    public static final String FUNC_VIEWPAYMENTFORPV = "viewPaymentForPV";

    public static final String FUNC_VIEWPAYMENTFORPVENERGY = "viewPaymentForPVEnergy";

    public static final String FUNC_VIEWPAYMENTPVFORSTORAGE = "viewPaymentPVForStorage";

    public static final String FUNC_VIEWPAYMENTSTORAGEFORPV = "viewPaymentStorageForPV";


    protected PVContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected PVContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> commisionToPVCounter(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_COMMISIONTOPVCOUNTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> commissionToConsumerCounter(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_COMMISSIONTOCONSUMERCOUNTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> commissionToStorageCounter(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_COMMISSIONTOSTORAGECOUNTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> controlCommisionStorageCounter() {
        final Function function = new Function(FUNC_CONTROLCOMMISIONSTORAGECOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> controlCommissionConsumerCounter() {
        final Function function = new Function(FUNC_CONTROLCOMMISSIONCONSUMERCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> controlCommissionPVCounter() {
        final Function function = new Function(FUNC_CONTROLCOMMISSIONPVCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> controlPaymentForPV() {
        final Function function = new Function(
                FUNC_CONTROLPAYMENTFORPV, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> controlPaymentPVForStorage() {
        final Function function = new Function(
                FUNC_CONTROLPAYMENTPVFORSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> controlPaymentStorageForPV() {
        final Function function = new Function(
                FUNC_CONTROLPAYMENTSTORAGEFORPV, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> controlProductionEnergyPerDayPV(BigInteger day) {
        final Function function = new Function(FUNC_CONTROLPRODUCTIONENERGYPERDAYPV, 
                Arrays.<Type>asList(new Uint256(day)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> paymentForPVEnergy(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PAYMENTFORPVENERGY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> paymentPVEnergyForStorage(BigInteger newEnergy, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PAYMENTPVENERGYFORSTORAGE, 
                Arrays.<Type>asList(new Uint256(newEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> rePurchaseStorageEnergyForPV(BigInteger needEnergy, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_REPURCHASESTORAGEENERGYFORPV, 
                Arrays.<Type>asList(new Uint256(needEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> registerBetForPV(BigInteger newBet) {
        final Function function = new Function(
                FUNC_REGISTERBETFORPV, 
                Arrays.<Type>asList(new Uint256(newBet)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationConsumer(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONCONSUMER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationConsumerCounter(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONCONSUMERCOUNTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationPV(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONPV, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationPVCounter(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONPVCOUNTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationStorage(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONSTORAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registrationStorageCounter(String newAddress) {
        final Function function = new Function(
                FUNC_REGISTRATIONSTORAGECOUNTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateConsumptionPVenergy(BigInteger newEnergy) {
        final Function function = new Function(
                FUNC_UPDATECONSUMPTIONPVENERGY, 
                Arrays.<Type>asList(new Uint256(newEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePaymentForPVEnergy() {
        final Function function = new Function(
                FUNC_UPDATEPAYMENTFORPVENERGY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePaymentPVEnergyForStorage() {
        final Function function = new Function(
                FUNC_UPDATEPAYMENTPVENERGYFORSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePaymentRePurchaseStorageEnergyForPV() {
        final Function function = new Function(
                FUNC_UPDATEPAYMENTREPURCHASESTORAGEENERGYFORPV, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateProductionPV(BigInteger newEnergy) {
        final Function function = new Function(
                FUNC_UPDATEPRODUCTIONPV, 
                Arrays.<Type>asList(new Uint256(newEnergy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> viewComissionConsumerCounter() {
        final Function function = new Function(FUNC_VIEWCOMISSIONCONSUMERCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> viewComissionPVCounter() {
        final Function function = new Function(FUNC_VIEWCOMISSIONPVCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> viewComissionStorageCounter() {
        final Function function = new Function(FUNC_VIEWCOMISSIONSTORAGECOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>> viewPaymentForPV() {
        final Function function = new Function(FUNC_VIEWPAYMENTFORPV, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> viewPaymentForPVEnergy() {
        final Function function = new Function(FUNC_VIEWPAYMENTFORPVENERGY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>> viewPaymentPVForStorage() {
        final Function function = new Function(FUNC_VIEWPAYMENTPVFORSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>> viewPaymentStorageForPV() {
        final Function function = new Function(FUNC_VIEWPAYMENTSTORAGEFORPV, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }


    public static PVContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PVContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PVContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PVContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PVContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PVContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }


    public static RemoteCall<PVContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PVContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

}
